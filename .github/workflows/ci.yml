name: Simplified C++ Build and Test

on:
  push:
    branches: [try]
  pull_request:
    branches: [try]

jobs:
  build:
    name: Build C++ Code
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Checkout Qt from the repository
      - name: Checkout Qt
        uses: actions/checkout@v3
        with:
          repository: 'OT-OpenTwin/ThirdParty'
          path: 'ThirdParty'
          ref: 'main'

      # Install Visual Studio 2022 Build Tools using Chocolatey 
      - name: Install Visual Studio 2022 Build Tools
        run: |
          choco install visualstudio2022buildtools --package-parameters "--add Microsoft.VisualStudio.Component.VC.Tools.x86.x64 --add Microsoft.VisualStudio.Workload.NativeDesktop"
          if ($LASTEXITCODE -eq 3010) {
            Write-Host "Installation requires a reboot. Proceeding without reboot."
            $env:ChocolateyExitCode = '0'  # Override the exit code
          }
        shell: powershell
        continue-on-error: false

      # Install Rust (v1.76.0)
      - name: Install Rust (v1.76.0)
        uses: actions-rs/toolchain@v1
        with:
          toolchain: '1.76.0'
          override: true

      # Verify Rust Installation
      - name: Verify Rust Installation
        run: |
          rustc --version

      # Cache CMake for subsequent builds
      - name: Cache CMake
        uses: actions/cache@v3
        with:
          path: C:\Program Files\CMake
          key: cmake-${{ runner.os }}

      # Install CMake using Chocolatey if not cached
      - name: Install CMake
        if: steps.CacheCMake.outputs.cache-hit != 'true'
        run: |
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
        shell: powershell
      
      # Set up the Visual Studio Build Environment
      - name: Set up Visual Studio Build Environment
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Auxiliary\Build\vcvars64.bat"

      # Generate build files using CMake
      - name: Generate Build Files
        run: |
          cmake -B build -S .
          cmake --build build --config Release

      # Run the resulting executable
      - name: Run the executable
        run: |
          & "$PWD/build/Release/main.exe"
        shell: powershell
