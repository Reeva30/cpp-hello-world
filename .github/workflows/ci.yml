name: Setup and Build with Visual Studio 2022

on: [push, pull_request]

jobs:
  build:
    runs-on: windows-latest

    steps:
    # Step 1: Check out the main project repository
    - name: Check out the main project repository
      uses: actions/checkout@v2
      with:
        repository: OT-OpenTwin/OpenTwin
        ref: Ci
        path: OpenTwin

    # Step 2: Check out the third-party repository
    - name: Check out the third-party repository
      uses: actions/checkout@v2
      with:
        repository: OT-OpenTwin/ThirdParty
        path: ThirdParty
        fetch-depth: 1  # Limit fetching to the last commit

    # Step 3: Install Rust 1.76.0
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: 1.76.0
        profile: minimal
        override: true

    # Step 4: Cache Cargo dependencies
    - name: Cache Cargo dependencies
      uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    # Step 5: Check if Visual Studio is installed
    - name: Check if Visual Studio is installed
      id: vs_check
      run: |
        if exist "C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\devenv.exe" (echo "::set-output name=installed::yes")
        else (echo "::set-output name=installed::no")

    # Step 6: Install Visual Studio 2022 Community
    - name: Install Visual Studio 2022 Community
      if: steps.vs_check.outputs.installed == 'no'
      run: |
        choco install visualstudio2022community --package-parameters "--add Microsoft.VisualStudio.Workload.ManagedDesktop --add Microsoft.VisualStudio.Workload.NetWeb --includeRecommended" -y

    # Step 7: Add MSBuild to PATH
    - name: Add MSBuild to PATH
      run: |
        echo 'C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Current\Bin' | Out-File -Append -FilePath $env:GITHUB_PATH

    # Step 8: Print PATH variable
    - name: Print PATH variable
      run: |
        echo $env:Path
        

    # Step 9: Check directory contents
    - name: Check directory contents
      run: |
        $msbuildDir = 'C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Current\Bin'
        if (Test-Path $msbuildDir) {
          Get-ChildItem -Path $msbuildDir
        } else {
          Write-Output "MSBuild directory not found at $msbuildDir"
          exit 1
        }
    # Step 9: Check directory contents
    - name: Check directory contents
      run: |
        $msbuildDir = 'C:\Program Files\Microsoft Visual Studio\2022\Community'
        if (Test-Path $msbuildDir) {
          Get-ChildItem -Path $msbuildDir
        } else {
          Write-Output "MSBuild directory not found at $msbuildDir"
          exit 1
        }

    # Step 10: Print MSBuild Version
    - name: Print MSBuild Version
      run: |
        msbuild -version

    # Step 11: Run the BuildAll.bat script and capture log
    - name: Run BuildAll.bat and capture log
      run: |
        cd OpenTwin
        echo "Starting BuildAll.bat..."
        set OPENTWIN_DEV_ROOT=%cd% && set OPENTWIN_THIRDPARTY_ROOT=%cd%\..\ThirdParty && set DEVENV_ROOT_2022="C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Current\Bin"
        call .\Scripts\BuildAndTest\BuildAll.bat > build.log 2>&1 || echo "BuildAll.bat failed with exit code %ERRORLEVEL%" >> build.log
        type build.log
      shell: cmd

    # Step 12: Upload build log artifact
    - name: Upload build log
      uses: actions/upload-artifact@v2
      with:
        name: build-log
        path: OpenTwin\build.log
