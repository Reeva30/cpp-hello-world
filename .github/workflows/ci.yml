name: C++ CI

on:
  push:
    branches: [AWSDemo]
  pull_request:
    branches: [AWSDemo]

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout OpenTwin repository
      uses: actions/checkout@v2
      with:
        repository: 'OT-OpenTwin/OpenTwin'
        path: 'OpenTwin'

    - name: Checkout ThirdParty repository
      uses: actions/checkout@v3
      with:
        repository: 'OT-OpenTwin/ThirdParty'
        path: 'ThirdParty'

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: '6.6.1'
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2019_64'
        archives: 'qtbase'
        setup-python: 'true'
        set-env: 'true'

    - name: Install Visual Studio 2022 Community
      run: |
        choco install -y visualstudio2022community --package-parameters "--add Microsoft.VisualStudio.Workload.NativeDesktop --add Microsoft.VisualStudio.Component.VC.Tools.x86.x64 --add Microsoft.VisualStudio.Component.Windows10SDK --add Microsoft.VisualStudio.Component.VC.Redist.14.Latest --add Microsoft.VisualStudio.ComponentGroup.NativeDesktop.WinXP --includeRecommended"
      shell: cmd

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: '1.56.1-x86_64-pc-windows-msvc'
        override: true

    - name: Install Qt Visual Studio Tools
      run: |
        # Install the Qt Visual Studio Tools extension
        Start-Process -Wait -FilePath "C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\devenv.exe" -ArgumentList "/InstallVSPackage", "{77A93D7B-91BD-4b1c-B7A3-D341D5B4F8B1}"
      shell: powershell

    - name: Setup Qt Plugin for Visual Studio 2022
      run: |
        $qtVersion = '6.6.1'
        $qtPath = '${{ github.workspace }}\OpenTwin\Third_Party_Libraries\Qt\6.6.1\msvc2019_64'
        & "C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\devenv.exe" /Command "QtToolsPackage.ManageQtVersions"
        & "C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\devenv.exe" /Command "QtToolsPackage.ManageQtVersions.AddVersion,$qtVersion,$qtPath"
      shell: powershell

    - name: Set environment variables
      run: |
        echo "OPENTWIN_DEV_ROOT=${{ github.workspace }}\OpenTwin" >> $GITHUB_ENV
        echo "OPENTWIN_THIRDPARTY_ROOT=${{ github.workspace }}\ThirdParty" >> $GITHUB_ENV
        echo "DEVENV_ROOT_2022=C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE" >> $GITHUB_ENV
        echo "QT_PLUGIN_PATH=${{ github.workspace }}\OpenTwin\Third_Party_Libraries\Qt\6.6.1\msvc2019_64" >> $GITHUB_ENV
        echo "PATH=${{ github.workspace }}\OpenTwin\Third_Party_Libraries\Qt\6.6.1\msvc2019_64\bin;$PATH" >> $GITHUB_ENV

    - name: Build OpenTwin using buildAll.bat
      run: |
        set OPENTWIN_DEV_ROOT=${{ github.workspace }}\OpenTwin
        set OPENTWIN_THIRDPARTY_ROOT=${{ github.workspace }}\ThirdParty
        set DEVENV_ROOT_2022=C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE
        ${{ github.workspace }}\OpenTwin\Scripts\BuildAndTest\BuildAll.bat
      shell: cmd

    - name: List files for debugging
      run: dir ${{ github.workspace }}\OpenTwin\Repo\Deployment
      shell: cmd

    - name: Configure AWS credentials
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws configure set default.region ${{ secrets.AWS_REGION }}
      shell: bash

    - name: Upload build artifacts to S3
      run: |
        aws s3 cp ${{ github.workspace }}\OpenTwin\Repo\Deployment s3://my-github-artifacts-bucket/deployment --recursive
      shell: bash
