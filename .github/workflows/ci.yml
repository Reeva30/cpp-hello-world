name: Simplified C++ Build and Test

on:
  push:
    branches: [inv]
  pull_request:
    branches: [inv]

jobs:
  build:
    name: Build C++ Code
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2


      - name: Install Visual Studio 2022 Build Tools
        run: |
          choco install visualstudio2022buildtools --package-parameters "--add Microsoft.VisualStudio.Component.VC.Tools.x86.x64 --add Microsoft.VisualStudio.Workload.NativeDesktop --add Microsoft.VisualStudio.Component.Windows10SDK --add Microsoft.VisualStudio.Component.VC.Redist.14.Latest"
          # Handle reboot error if necessary
        shell: powershell
        continue-on-error: true
    
    # Cache CMake for subsequent builds
      - name: Cache CMake
        uses: actions/cache@v3
        with:
          path: C:\Program Files\CMake
          key: cmake-${{ runner.os }}

      # Install CMake using Chocolatey if not cached
      - name: Install CMake
        if: steps.CacheCMake.outputs.cache-hit != 'true'
        run: |
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
        shell: powershell
      

        
      - name: List MSVC versions
        run: dir "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Tools\MSVC"
        shell: cmd

      # Install Rust (v1.76.0)
      - name: Install Rust (v1.76.0)
        uses: actions-rs/toolchain@v1
        with:
          toolchain: '1.76.0'
          override: true

      # Verify Rust Installation
      - name: Verify Rust Installation
        run: |
          rustc --version
      
            # Set up the Visual Studio Build Environment

      # Set up the Visual Studio Build Environment
      - name: Set up Visual Studio Build Environment
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Auxiliary\Build\vcvars64.bat"

          
    # Add QT Visual Studio Tools
      - name: Add QT Visual Studio Tools
        shell: cmd
        run: |
          "C:\Program Files (x86)\Microsoft Visual Studio\Installer\vs_installer.exe" modify --installPath "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools" --add Microsoft.VisualStudio.Component.QT.VisualStudioTools --add Microsoft.VisualStudio.Component.QT.6.6.1.VisualStudioTools --quiet

    # Find Qt Installation Directory
      - name: Find Qt Installation Directory
        id: find-qt-path
        run: |
          $qtPath = Get-ChildItem -Path "C:\" -Filter "qt*" -Recurse | Where-Object { $_.PSIsContainer } | Select-Object -First 1 -ExpandProperty FullName
          echo "Qt Installation Directory: $qtPath"


      # Add Qt bin directory to PATH
      - name: Add Qt bin directory to PATH
        run: |
          $qtBinPath = Join-Path -Path $qtPath -ChildPath "bin"
          Write-Output "Adding Qt bin directory to PATH: $qtBinPath"
          $env:Path += ";$qtBinPath"

      # Verify Qt Installation
      - name: Verify Qt Installation
        run: |
          qmake -v  # or any other command to verify the Qt installation



      # Generate build files using CMake 
      - name: Generate Build Files
        run: |
          cmake -B . -S .
          cmake --build . --config Release  # Compile in Release mode

      # Run the resulting executable
      - name: Run the executable
        run: |
          Join-Path -Path $PWD -ChildPath "build\main.exe"

