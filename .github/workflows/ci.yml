name: MSBuild

on:
  push:
    branches: [ "Demo" ]
  pull_request:
    branches: [ "Demo" ]

env:
  DEVENV_PATH: C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\IDE
  DEVENV_PATH2: C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\IDE\devenv.com
  QT_PATH: ${{ github.workspace }}\ThirdParty\Qt\6.6.1\msvc2019_64


permissions:
  contents: read

jobs:
  build:
    runs-on: windows-latest

    steps:
    
 # Step 1: Check out the main project repository
    - name: Check out the main project repository
      uses: actions/checkout@v2
      with:
        repository: OT-OpenTwin/OpenTwin
        ref: Ci
        path: OpenTwin

    # Step 2: Check out the third-party repository
    - name: Check out the third-party repository
      uses: actions/checkout@v2
      with:
        repository: OT-OpenTwin/ThirdParty
        path: ThirdParty
        fetch-depth: 1  # Limit fetching to the last commit

    # Step 3: Install Rust 1.76.0
    - name: Install Rust 1.76.0
      run: |
        choco install rust --version=1.76.0 -y
      shell: cmd

   
    - name: Add Visual Studio to PATH
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Debug - List repository files
      run: dir /s
      shell: cmd

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14' # specify the version you need

    - name: Install Yarn
      run: npm install -g yarn

    - name: Install dependencies
      run: yarn install
      
    # Install Python and Sphinx
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install Sphinx and dependencies
      run: |
        python -m pip install --upgrade pip
        pip install sphinx sphinx-rtd-theme




    - name: Install Qt
      uses: jurplel/install-qt-action@v4
      with:
          version: '6.6.1'
          host: 'windows'
          target: 'desktop'
          arch: 'win64_msvc2019_64'
          modules: 'qtcharts qtwebengine'
          archives: 'qtbase qtsvg'
          cache: 'false'
          setup-python: 'true'
          tools: 'tools_ifw tools_qtcreator,qt.tools.qtcreator'
          set-env: 'true'
          tools-only: 'false'
          aqtversion: '==3.1.*'
          py7zrversion: '==0.20.*'
          extra: '--external 7z'

    - name: Set Environment Variables for Qt and MSBuild
      shell: pwsh
      run: |
          $Env:QT_PATH = "${{ github.workspace }}\ThirdParty\Qt\6.6.1\msvc2019_64"
          $Env:QtToolsPath = "$Env:QT_PATH\bin"
          $Env:QtMsBuild = "${{ github.workspace }}\ThirdParty\QtMsBuild"
          $Env:PATH = "$Env:QT_PATH\bin;$Env:QtMsBuild;$Env:MSBUILD_PATH;$Env:PATH"

          echo "QT_PATH=$Env:QT_PATH" >> $GITHUB_ENV
          echo "QtToolsPath=$Env:QtToolsPath" >> $GITHUB_ENV
          echo "QtMsBuild=$Env:QtMsBuild" >> $GITHUB_ENV
          echo "PATH=$Env:PATH" >> $GITHUB_ENV

    - name: Verify Qt Setup
      shell: pwsh
      run: |
          Write-Host "Verifying Qt setup..."
          if (-Not $Env:QT_PATH) {
            Write-Host "QT_PATH is not set."
            exit 1
          }
          if (-Not (Get-Command qmake -ErrorAction SilentlyContinue)) {
            Write-Host "qmake could not be found"
            exit 1
          }
          if (-Not (Get-Command moc -ErrorAction SilentlyContinue)) {
            Write-Host "moc could not be found"
            exit 1
          }
          if (-Not (Get-Command uic -ErrorAction SilentlyContinue)) {
            Write-Host "uic could not be found"
            exit 1
          }
          Write-Host "Qt setup verified successfully."






    - name: Setup and Execute Build
      shell: cmd
      run: |
        echo "Current directory: %cd%"
        set OPENTWIN_DEV_ROOT=%cd%\OpenTwin
        set DEVENV_ROOT_2022=%DEVENV_PATH%
        set OPENTWIN_THIRDPARTY_ROOT=%cd%\ThirdParty
        set QtMsBuild=%cd%\ThirdParty\Qt\6.6.1\msvc2019_64
        echo "OPENTWIN_DEV_ROOT=%OPENTWIN_DEV_ROOT%"
        echo "DEVENV_ROOT_2022=%DEVENV_ROOT_2022%"
        echo "OPENTWIN_THIRDPARTY_ROOT=%OPENTWIN_THIRDPARTY_ROOT%"
        echo "Checking directories and necessary files..."
        echo "OpenTwin directory: %OPENTWIN_DEV_ROOT%"
        dir %OPENTWIN_DEV_ROOT%
        echo "ThirdParty directory: %OPENTWIN_THIRDPARTY_ROOT%"
        dir %OPENTWIN_THIRDPARTY_ROOT%
        echo "qt directory: %QtMsBuild%"
        dir %QtMsBuild%
        echo "Visual Studio 2022 directory: %DEVENV_ROOT_2022%"
        dir "%DEVENV_ROOT_2022%"
        echo "Checking if BuildAll.bat exists..."
        echo "Starting BuildAll.bat..."
        call %OPENTWIN_DEV_ROOT%\Scripts\BuildAndTest\BuildAll.bat 
        echo "All checks passed."


    - name: Upload build log summary artifact
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: build-log-Debug
        path: ${{ github.workspace }}\OpenTwin\Scripts\BuildAndTest\buildLog_Debug.txt

        
    - name: Upload build log summary artifact
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: build-log-Release
        path: ${{ github.workspace }}\OpenTwin\Scripts\BuildAndTest\buildLog_Release.txt
        

    - name: Upload build log summary artifact
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: build-log-summary
        path: ${{ github.workspace }}\OpenTwin\Scripts\BuildAndTest\buildLog_Summary.txt
