name: Setup Visual Studio 2022 Build Tools

on: [push, pull_request]

jobs:
  build:
    runs-on: windows-latest
    
    steps:

    # Step 1: Check out the main project repository
    - name: Check out the main project repository
      uses: actions/checkout@v2
      with:
        repository: OT-OpenTwin/OpenTwin
        ref: Ci
        path: OpenTwin

    # Step 2: Check out the third-party repository
    - name: Check out the third-party repository
      uses: actions/checkout@v2
      with:
        repository: OT-OpenTwin/ThirdParty
        path: ThirdParty

    # Step 4: Install Rust 1.76.0
    - name: Install Rust 1.76.0
      run: |
        choco install rust --version=1.76.0 -y
      shell: cmd

    # Step 5: Display the files in the main project repository
    - name: List files in the main project repository
      run: dir OpenTwin


    - name: Install Visual Studio Build Tools
      run: |
        choco install visualstudio2022buildtools --package-parameters "--add Microsoft.VisualStudio.Component.VC.Tools.x86.x64 --add Microsoft.VisualStudio.Component.Windows10SDK --add Microsoft.VisualStudio.Component.TestTools.BuildTools --includeOptional" -y
        choco install visualstudio2022-workload-vctools -y
            
    - name: Add MSBuild to PATH
      run: |
        echo 'C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\MSBuild\Current\Bin' | Out-File -Append -FilePath $env:GITHUB_PATH
    
    - name: Print PATH variable
      run: |
        echo $env:Path
    
    - name: Check directory contents
      run: |
        $msbuildDir = 'C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\MSBuild\Current\Bin'
        if (Test-Path $msbuildDir) {
          Get-ChildItem -Path $msbuildDir
        } else {
          Write-Output "MSBuild directory not found at $msbuildDir"
          exit 1
        }
    
    - name: Print MSBuild Version
      run: |
        msbuild -version


    # Step 7: Set environment variables and check paths
    - name: Set environment variables and check paths
      run: |
        cd OpenTwin
        echo "Current directory: %cd%"
        set OPENTWIN_DEV_ROOT=%cd%
        set DEVENV_ROOT_2022="C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\MSBuild\Current\Bin"
        set OPENTWIN_THIRDPARTY_ROOT=%cd%\..\ThirdParty
        echo "OPENTWIN_DEV_ROOT=%OPENTWIN_DEV_ROOT%"
        echo "DEVENV_ROOT_2022=%DEVENV_ROOT_2022%"
        echo "OPENTWIN_THIRDPARTY_ROOT=%cd%\..\ThirdParty"
        echo "Checking if BuildAll.bat exists..."
        if exist .\Scripts\BuildAndTest\BuildAll.bat (
          echo "BuildAll.bat exists."
        ) else (
          echo "BuildAll.bat does not exist."
          exit /b 1
        )
        echo "Checking if RebuildAll.bat exists..."
        if exist %OPENTWIN_DEV_ROOT%\Scripts\BuildAndTest\RebuildAll.bat (
          echo "RebuildAll.bat exists."
        ) else (
          echo "RebuildAll.bat does not exist."
        )
        echo "Checking if CheckForFailedBuilds.bat exists..."
        if exist %OPENTWIN_DEV_ROOT%\Scripts\BuildAndTest\CheckForFailedBuilds.bat (
          echo "CheckForFailedBuilds.bat exists."
        ) else (
          echo "CheckForFailedBuilds.bat does not exist."
        )
        echo "All checks passed."
      shell: cmd

    # Step 8: Run the BuildAll.bat script and capture log
    - name: Run BuildAll.bat and capture log
      run: |
        cd OpenTwin
        echo "Starting BuildAll.bat..."
        set OPENTWIN_DEV_ROOT=%cd% &&  set OPENTWIN_THIRDPARTY_ROOT=%cd%\..\ThirdParty && set DEVENV_ROOT_2022="C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\MSBuild\Current\Bin" && call .\Scripts\BuildAndTest\BuildAll.bat > build.log 2>&1
        echo "BuildAll.bat finished with exit code %ERRORLEVEL%"
        type build.log
      shell: cmd

    # Step 9: Upload build log artifact
    - name: Upload build log
      uses: actions/upload-artifact@v2
      with:
        name: build-log
        path: OpenTwin\build.log
