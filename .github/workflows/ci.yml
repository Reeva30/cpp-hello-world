name: C++ Build and Test

on:
  push:
    branches: [ inv ]
  pull_request:
    branches: [ inv ]


jobs:
  build:
    name: Build C++ Code
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install Rust (v1.76.0)
        uses: actions-rs/toolchain@v1
        with:
          toolchain: '1.76.0'
          override: true

      - name: Verify Rust Installation
        run: |
          rustc --version


      # Cache vcpkg for faster subsequent builds
      - name: Cache vcpkg
        uses: actions/cache@v3
        with:
          path: ~/.vcpkg
          key: vcpkg-${{ runner.os }}-${{ hashFiles('**/vcpkg.json') }}

      # Install CMake using Chocolatey
      - name: Install CMake
        run: |
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
        shell: powershell

      # Install Visual Studio 2022 Build Tools using Chocolatey
      - name: Install Visual Studio 2022 Build Tools
        run: |
          choco install visualstudio2022buildtools --package-parameters "--add Microsoft.VisualStudio.Component.VC.Tools.x86.x64"
        shell: powershell

      # Clone vcpkg repository and bootstrap vcpkg
      - name: Install vcpkg
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          .\vcpkg\bootstrap-vcpkg.bat

      # Install specific Qt components using vcpkg and enable binary caching
      - name: Install Qt with vcpkg
        run: |
          .\vcpkg\vcpkg install qt5-base:x64-windows qt5-gui:x64-windows qt5-widgets:x64-windows --binarycaching

      # Set up the Visual Studio Build Environment
      - name: Set up Visual Studio Build Environment
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Auxiliary\Build\vcvars64.bat"

      # Generate build files using CMake and the vcpkg toolchain file
      - name: Generate Build Files
        run: |
          cmake -S . -B build -DCMAKE_TOOLCHAIN_FILE=.\vcpkg\scripts\buildsystems\vcpkg.cmake

      # Build the project using CMake
      - name: Build Project
        run: |
          cmake --build build --config Release

      # Run the resulting executable (adjust path to your specific executable)
      - name: Run the executable
        run: |
          .\build\Release\main.exe
