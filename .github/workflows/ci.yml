

name: C++ CI with Cached Artifacts

on:
  push:
    branches: [dev]
  pull_request:
    branches: [dev]

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: '6.5.2'
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2019_64'
        modules: 'qtbase,qttools'
        setup-python: 'true'
        set-env: 'true'

    - name: Install Visual Studio 2022 Build Tools
      run: |
        choco install -y visualstudio2022buildtools --package-parameters "--add Microsoft.VisualStudio.Component.VC.Tools.x86.x64 --add Microsoft.VisualStudio.Workload.NativeDesktop --add Microsoft.VisualStudio.Component.Windows10SDK --add Microsoft.VisualStudio.Component.VC.Redist.14.Latest"
      shell: bash



    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: '1.76.0'
        override: true

    - name: Setup Qt Plugin for Visual Studio 2022
      run: |
        powershell -command "Install-Module -Name PowerShellGet -Force -AllowClobber"
        powershell -command "Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force"
        powershell -command "Install-Module -Name VSSetup -Force -AllowClobber"
        powershell -command "Import-Module VSSetup"
        powershell -command "$vs = Get-VSSetupInstance -All -Requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64"
        powershell -command "$vsId = $vs.InstanceId"
        powershell -command "Start-Process -FilePath $($vs.InstallationPath + '\Common7\IDE\devenv.exe') -ArgumentList '/Command','QtToolsPackage.ManageQtVersions' -Wait"
        powershell -command "$qtVersion = '6.6.1'"
        powershell -command "$qtPath = '${{ github.workspace }}\OpenTwin\Third_Party_Libraries\Qt\6.6.1\msvc2019_64'"
        powershell -command "Start-Process -FilePath $($vs.InstallationPath + '\Common7\IDE\devenv.exe') -ArgumentList '/Command','QtToolsPackage.ManageQtVersions.AddVersion,$qtVersion,$qtPath' -Wait"

    - name: Set environment variables
      run: |
        echo "OPENTWIN_DEV_ROOT=${{ github.workspace }}\OpenTwin" >> $GITHUB_ENV
        echo "OPENTWIN_THIRDPARTY_ROOT=${{ github.workspace }}\ThirdParty" >> $GITHUB_ENV
        echo "DEVENV_ROOT_2022=C:\Program Files\Microsoft Visual Studio\2022\BuildTools\Common7\IDE" >> $GITHUB_ENV

    - name: Build OpenTwin using buildAll.bat
      run: |
        ${{ github.workspace }}\OpenTwin\Scripts\BuildAndTest\BuildAll.bat
      shell: cmd

    - name: Configure AWS credentials
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws configure set default.region ${{ secrets.AWS_REGION }}
      shell: bash

    - name: Upload build artifacts to S3
      run: |
        aws s3 cp ${{ github.workspace }}\OpenTwin\Repo\Deployment s3://my-github-artifacts-bucket/deployment --recursive
      shell: bash
