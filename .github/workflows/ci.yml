name: Add Qt VS Add-in to Visual Studio 2022 and Configure Qt Version

on:
  push:
    branches:
      - test
  pull_request:
    branches:
      - test

env:
  DEVENV_PATH: "C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE"
  DEVENV_PATH2: "C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\devenv.com"
  QT_PATH: "${{ github.workspace }}\\ThirdParty\\Qt\\6.6.1\\msvc2019_64"

permissions:
  contents: read

jobs:
  build:
    runs-on: windows-latest

    steps:
    
    - name: Check out the main project repository
      uses: actions/checkout@v4
      with:
        repository: OT-OpenTwin/OpenTwin
        ref: Ci
        path: OpenTwin

  

    - name: Add Visual Studio to PATH
      uses: microsoft/setup-msbuild@v1.0.2


  
    - name: Verify Visual Studio 2022 installation
      run: |
        $vswherePath = "${env:ProgramFiles(x86)}\\Microsoft Visual Studio\\Installer\\vswhere.exe"
        if (-Not (Test-Path $vswherePath)) {
          Write-Error "vswhere.exe not found. Visual Studio 2022 might not be installed."
          exit 1
        }
        $vsInstallPath = & $vswherePath -latest -version "[17.0,18.0)" -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath
        Write-Output "VS_INSTALL_PATH=$vsInstallPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8

    - name: Download Qt VS Add-in
      run: |
        $url = "https://mirror.netcologne.de/qtproject/development_releases/vsaddin/3.0.2/qt-vsaddin-msvc2022-3.0.2.vsix"
        $output = "qt-vsaddin-msvc2022-3.0.2.vsix"
        Invoke-WebRequest -Uri $url -OutFile $output

    - name: Verify SHA-256 Hash
      run: |
        $expectedHash = "b1eba080495505638e2431e85ffa4108ee3b688595cc4657f1b80e30712c2f23"
        $fileHash = Get-FileHash -Path "qt-vsaddin-msvc2022-3.0.2.vsix" -Algorithm SHA256
        if ($fileHash.Hash -ne $expectedHash) {
          throw "Hash mismatch: $($fileHash.Hash)"
        }

    - name: Find VSIXInstaller
      run: |
        $vswherePath = "${env:ProgramFiles(x86)}\\Microsoft Visual Studio\\Installer\\vswhere.exe"
        $vsInstallPath = & $vswherePath -latest -version "[17.0,18.0)" -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath
        $vsixInstallerPath = Join-Path -Path $vsInstallPath -ChildPath "Common7\\IDE\\VSIXInstaller.exe"
        if (-Not (Test-Path $vsixInstallerPath)) {
          Write-Error "VSIXInstaller.exe not found."
          exit 1
        }
        Write-Output "VSIX_INSTALLER_PATH=$vsixInstallerPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8

    - name: Install Qt VS Add-in
      run: |
        $vsixInstallerPath = $env:VSIX_INSTALLER_PATH
        Start-Process -FilePath $vsixInstallerPath -ArgumentList "/q", "qt-vsaddin-msvc2022-3.0.2.vsix" -NoNewWindow -Wait

    - name: Configure Qt Version
      env:
        QT_PATH: ${{ github.workspace }}\\ThirdParty\\Qt\\6.6.1\\msvc2019_64
      run: |
        $qtVersionName = "6.6.1"
        $qtPath = "${env:QT_PATH}"
        
        # Paths to check for Qt configuration
        $configPaths = @(
            "$env:APPDATA\\QtProject\\qtcreator\\qtversion.xml",
            "$env:LOCALAPPDATA\\QtProject\\qtcreator\\qtversion.xml"
        )
        
        # Path to qmake.exe
        $qmakePath = Join-Path $qtPath "bin\\qmake.exe"
        
        $configFound = $false
        foreach ($configPath in $configPaths) {
            if (Test-Path $configPath) {
                $configFound = $true
                [xml]$qtConfig = Get-Content $configPath
                
                # Create a new qtversion element if it doesn't exist
                if (-Not $qtConfig.qtcreator.qtversions.qtversion) {
                    $qtConfig.qtcreator.AppendChild($qtConfig.CreateElement("qtversions")) | Out-Null
                }
                
                $newVersion = $qtConfig.CreateElement("qtversion")
                $newVersion.SetAttribute("Id", "qt." + $qtVersionName)
                $newVersion.SetAttribute("Name", $qtVersionName)
                $newVersion.SetAttribute("QMakePath", $qmakePath)
                
                # Append the new version to the qtversions node
                $qtConfig.qtcreator.qtversions.AppendChild($newVersion) | Out-Null
                $qtConfig.Save($configPath)
                
                Write-Host "Configured Qt version $qtVersionName with path $qtPath in $configPath"
            }
        }
        
        if (-Not $configFound) {
            Write-Error "Qt configuration file not found in expected paths."
            Write-Host "Expected paths: $($configPaths -join ', ')"
            Write-Host "Ensure that Qt Creator is installed and has been run at least once to generate configuration files."
            exit 1
        } # <- Added missing closing brace


    - name: Debug - List repository files
      run: dir /s
      shell: cmd

    - name: Setup and Execute Build
      shell: cmd
      run: |
        echo "Current directory: %cd%"
        set OPENTWIN_DEV_ROOT=%cd%\\OpenTwin
        set DEVENV_ROOT_2022=%DEVENV_PATH%
        set OPENTWIN_THIRDPARTY_ROOT=%cd%\\ThirdParty
        echo "OPENTWIN_DEV_ROOT=%OPENTWIN_DEV_ROOT%"
        echo "DEVENV_ROOT_2022=%DEVENV_ROOT_2022%"
        echo "OPENTWIN_THIRDPARTY_ROOT=%OPENTWIN_THIRDPARTY_ROOT%"
        echo "Checking directories and necessary files..."
        echo "OpenTwin directory: %OPENTWIN_DEV_ROOT%"
        dir %OPENTWIN_DEV_ROOT%
        echo "ThirdParty directory: %OPENTWIN_THIRDPARTY_ROOT%"
        dir %OPENTWIN_THIRDPARTY_ROOT%
        echo "Visual Studio 2022 directory: %DEVENV_ROOT_2022%"
        dir "%DEVENV_ROOT_2022%"
        echo "Checking if BuildAll.bat exists..."
        echo "Starting BuildAll.bat..."
        call %OPENTWIN_DEV_ROOT%\\Scripts\\BuildAndTest\\BuildAll.bat 
        echo "All checks passed."

    - name: Upload build log summary artifact
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: build-log-summary
        path: ${{ github.workspace }}\\OpenTwin\\Scripts\\BuildAndTest\\buildLog_Summary.txt
