name: Setup and Build with Visual Studio 2022

on: [push, pull_request]

jobs:
  build:
    runs-on: windows-latest

    steps:
    # Step 1: Check out the main project repository
    - name: Check out the main project repository
      uses: actions/checkout@v2
      with:
        repository: OT-OpenTwin/OpenTwin
        ref: Ci
        path: OpenTwin




    # Step 4: Install Visual Studio 2022 Community
    - name: Install Visual Studio 2022 Community
      run: |
        choco install visualstudio2022community --package-parameters "--add Microsoft.VisualStudio.Workload.ManagedDesktop --add Microsoft.VisualStudio.Workload.NetWeb --includeRecommended" -y

    - name: Set up Visual Studio Path
      run: |
        if [ -d "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE" ]; then
          echo "DEVENV_ROOT_2022=C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE" >> $GITHUB_ENV
        else
          echo "Visual Studio path not found."
          exit 1
        fi
      shell: bash
    
    - name: Verify DEVENV_ROOT_2022
      run: |
        echo "DEVENV_ROOT_2022: ${{ env.DEVENV_ROOT_2022 }}"
      shell: bash


    
    


    # Step 2: Check out the third-party repository
    - name: Check out the third-party repository
      uses: actions/checkout@v2
      with:
        repository: OT-OpenTwin/ThirdParty
        path: ThirdParty
        fetch-depth: 1  # Limit fetching to the last commit

    # Step 3: Install Rust 1.76.0
    - name: Install Rust 1.76.0
      run: |
        choco install rust --version=1.76.0 -y
      shell: cmd

    
    # Step 8: Set environment variables, check paths, and run BuildAll.bat
    - name: Setup and Execute Build
      run: |
        cd OT-OpenTwin
        echo "Current directory: %cd%"
        set OPENTWIN_DEV_ROOT=%cd%\OpenTwin
        set OPENTWIN_THIRDPARTY_ROOT=%cd%\ThirdParty
        echo "OPENTWIN_DEV_ROOT=%OPENTWIN_DEV_ROOT%"
        echo "DEVENV_ROOT_2022=%DEVENV_ROOT_2022%"
        echo "OPENTWIN_THIRDPARTY_ROOT=%OPENTWIN_THIRDPARTY_ROOT%"
        echo "Checking directories and necessary files..."
        echo "OpenTwin directory: %OPENTWIN_DEV_ROOT%"
        dir %OPENTWIN_DEV_ROOT%
        echo "ThirdParty directory: %OPENTWIN_THIRDPARTY_ROOT%"
        dir %OPENTWIN_THIRDPARTY_ROOT%
        echo "Visual Studio 2022 directory: %DEVENV_ROOT_2022%"
        dir %DEVENV_ROOT_2022%
        echo "Checking if BuildAll.bat exists..."
        if exist %OPENTWIN_DEV_ROOT%\Scripts\BuildAndTest\BuildAll.bat (
          echo "BuildAll.bat exists. Starting BuildAll.bat..."
          call %OPENTWIN_DEV_ROOT%\Scripts\BuildAndTest\BuildAll.bat 
        ) else (
          echo "BuildAll.bat does not exist."
          exit /b 1
        )
        echo "Checking if RebuildAll.bat exists..."
        if exist %OPENTWIN_DEV_ROOT%\Scripts\BuildAndTest\RebuildAll.bat (
          echo "RebuildAll.bat exists."
        ) else (
          echo "RebuildAll.bat does not exist."
        )
        echo "Checking if CheckForFailedBuilds.bat exists..."
        if exist %OPENTWIN_DEV_ROOT%\Scripts\BuildAndTest\CheckForFailedBuilds.bat (
          echo "CheckForFailedBuilds.bat exists."
        ) else (
          echo "CheckForFailedBuilds.bat does not exist."
        )
        echo "All checks passed."
      shell: cmd
      continue-on-error: true

    # Step 9: Upload build log artifact
    - name: Upload build log
      uses: actions/upload-artifact@v2
      with:
        name: build-log
        path: OpenTwin\build.log

    - name: Upload build log
      if: always()  # This ensures the log is uploaded whether the previous steps fail or succeed
      uses: actions/upload-artifact@v2
      with:
        name: build-log
        path: OT-OpenTwin\OpenTwin\build.log
