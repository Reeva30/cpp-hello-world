

name: C++ CI with Cached Artifacts

on:
  push:
    branches: [dev]
  pull_request:
    branches: [dev]

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: '6.5.2'
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2019_64'
        archives: 'qtbase'
        set-env: 'true'

    - name: Install Visual Studio 2022 Build Tools
      run: |
        choco install -y visualstudio2022buildtools --package-parameters "--add Microsoft.VisualStudio.Component.VC.Tools.x86.x64 --add Microsoft.VisualStudio.Workload.NativeDesktop --add Microsoft.VisualStudio.Component.Windows10SDK --add Microsoft.VisualStudio.Component.VC.Redist.14.Latest"
      shell: bash



    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: '1.76.0'
        override: true



    - name: Setup Qt Plugin for Visual Studio 2022
      run: |
        Install-Module -Name VSSetup -Force -AllowClobber
        Import-Module VSSetup
        $vs = Get-VSSetupInstance -All
        $installationPath = $vs[0].InstallationPath
        $qtVersion = '6.6.1'
        $qtPath = '${{ github.workspace }}\OpenTwin\Third_Party_Libraries\Qt\6.6.1\msvc2019_64'
        Start-Process -FilePath "$installationPath\Common7\IDE\devenv.exe" -ArgumentList '/Command', 'QtToolsPackage.ManageQtVersions' -Wait
        Start-Process -FilePath "$installationPath\Common7\IDE\devenv.exe" -ArgumentList '/Command', "QtToolsPackage.ManageQtVersions.AddVersion,$qtVersion,$qtPath" -Wait

    - name: Set environment variables
      run: |
        echo "OPENTWIN_DEV_ROOT=${{ github.workspace }}\OpenTwin" >> $GITHUB_ENV
        echo "OPENTWIN_THIRDPARTY_ROOT=${{ github.workspace }}\ThirdParty" >> $GITHUB_ENV
        echo "DEVENV_ROOT_2022=C:\Program Files\Microsoft Visual Studio\2022\BuildTools\Common7\IDE" >> $GITHUB_ENV
        echo "OPEN_TWIN_SERVICES_ADDRESS=127.0.0.1" >> $GITHUB_ENV
        echo "OPEN_TWIN_CERTS_PATH=${{ github.workspace }}\OpenTwin\Certificates" >> $GITHUB_ENV
        echo "OPEN_TWIN_MONGODB_ADDRESS=tls@127.0.0.1:27017" >> $GITHUB_ENV
        echo "OPEN_TWIN_AUTH_PORT=8092" >> $GITHUB_ENV
        echo "OPEN_TWIN_GSS_PORT=8091" >> $GITHUB_ENV
        echo "OPEN_TWIN_LSS_PORT=8093" >> $GITHUB_ENV
        echo "OPEN_TWIN_GDS_PORT=9094" >> $GITHUB_ENV
        echo "OPEN_TWIN_LDS_PORT=9095" >> $GITHUB_ENV
        echo "OPEN_TWIN_SITE_ID=1" >> $GITHUB_ENV


    - name: Set environment variables
      run: |
        echo "OPENTWIN_DEV_ROOT=${{ github.workspace }}\OpenTwin" >> $GITHUB_ENV
        echo "OPENTWIN_THIRDPARTY_ROOT=${{ github.workspace }}\ThirdParty" >> $GITHUB_ENV
        echo "DEVENV_ROOT_2022=C:\Program Files\Microsoft Visual Studio\2022\BuildTools\Common7\IDE" >> $GITHUB_ENV

    - name: Build OpenTwin using buildAll.bat
      run: |
        ${{ github.workspace }}\OpenTwin\Scripts\BuildAndTest\BuildAll.bat
      shell: cmd

    - name: Configure AWS credentials
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws configure set default.region ${{ secrets.AWS_REGION }}
      shell: bash

    - name: Upload build artifacts to S3
      run: |
        aws s3 cp ${{ github.workspace }}\OpenTwin\Repo\Deployment s3://my-github-artifacts-bucket/deployment --recursive
      shell: bash
