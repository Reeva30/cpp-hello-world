name: Setup and Build with Visual Studio 2022

on: [push, pull_request]

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Check out the main project repository
      uses: actions/checkout@v2
      with:
        repository: OT-OpenTwin/OpenTwin
        ref: Ci
        path: OpenTwin

    - name: Check out the third-party repository
      uses: actions/checkout@v2
      with:
        repository: OT-OpenTwin/ThirdParty
        path: OT-OpenTwin/ThirdParty
        fetch-depth: 1
        submodules: 'true'

    - name: Check and Install Rust 1.76.0
      run: |
        rustc --version | find "1.76.0" || choco install rust --version=1.76.0 -y
      shell: cmd

    - name: Install Visual Studio 2022 Community
      run: |
        choco install visualstudio2022community --package-parameters "--add Microsoft.VisualStudio.Workload.ManagedDesktop --add Microsoft.VisualStudio.Workload.NetWeb --includeRecommended" -y

    - name: Add MSBuild to PATH
      run: |
        echo 'C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Current\Bin' | Out-File -Append -FilePath $env:GITHUB_PATH

    - name: Print PATH variable
      run: |
        echo $env:Path

    - name: Check directory contents
      run: |
        $msbuildDir = 'C:\Program Files\Microsoft Visual Studio\2022\Community\Common7' 
        if (Test-Path $msbuildDir) {
          Get-ChildItem -Path $msbuildDir
        } else {
          Write-Output "MSBuild directory not found at $msbuildDir"
          exit 1
        }

            
    # Step 8: Set environment variables, check paths, and run BuildAll.bat
    - name: Setup and Execute Build
      run: |
        cd OT-OpenTwin
        echo "Current directory: %cd%" > build.log
        set OPENTWIN_DEV_ROOT=%cd%\OpenTwin >> build.log
        set DEVENV_ROOT_2022="C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE" >> build.log
        set OPENTWIN_THIRDPARTY_ROOT=%cd%\ThirdParty >> build.log
        echo "OPENTWIN_DEV_ROOT=%OPENTWIN_DEV_ROOT%" >> build.log
        echo "DEVENV_ROOT_2022=%DEVENV_ROOT_2022%" >> build.log
        echo "OPENTWIN_THIRDPARTY_ROOT=%OPENTWIN_THIRDPARTY_ROOT%" >> build.log
        echo "Checking directories and necessary files..." >> build.log
        echo "OpenTwin directory: %OPENTWIN_DEV_ROOT%" >> build.log
        dir %OPENTWIN_DEV_ROOT% >> build.log
        echo "ThirdParty directory: %OPENTWIN_THIRDPARTY_ROOT%" >> build.log
        dir %OPENTWIN_THIRDPARTY_ROOT% >> build.log
        echo "Visual Studio 2022 directory: %DEVENV_ROOT_2022%" >> build.log
        dir %DEVENV_ROOT_2022% >> build.log
        echo "Checking if BuildAll.bat exists..." >> build.log
        if exist %OPENTWIN_DEV_ROOT%\Scripts\BuildAndTest\BuildAll.bat (
          echo "BuildAll.bat exists. Starting BuildAll.bat..." >> build.log
          call %OPENTWIN_DEV_ROOT%\Scripts\BuildAndTest\BuildAll.bat >> build.log 2>&1
        ) else (
          echo "BuildAll.bat does not exist." >> build.log
          exit /b 1
        )
        echo "Checking if RebuildAll.bat exists..." >> build.log
        if exist %OPENTWIN_DEV_ROOT%\Scripts\BuildAndTest\RebuildAll.bat (
          echo "RebuildAll.bat exists." >> build.log
        ) else (
          echo "RebuildAll.bat does not exist." >> build.log
        )
        echo "Checking if CheckForFailedBuilds.bat exists..." >> build.log
        if exist %OPENTWIN_DEV_ROOT%\Scripts\BuildAndTest\CheckForFailedBuilds.bat (
          echo "CheckForFailedBuilds.bat exists." >> build.log
        ) else (
          echo "CheckForFailedBuilds.bat does not exist." >> build.log
        )
        echo "All checks passed." >> build.log
      shell: cmd
      continue-on-error: true  # This ensures that the next step (uploading the log) always runs
    
    # Step 9: Upload build log artifact
    - name: Upload build log
      if: always()  # This ensures the log is uploaded whether the previous steps fail or succeed
      uses: actions/upload-artifact@v2
      with:
        name: build-log
        path: OT-OpenTwin\build.log

